{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackURIs","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","updatedTracks","filter","removedTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ac0e267b.chunk.js","sourcesContent":["const CLIENT_ID = \"7d182cb9c53a4e3e8c613d68dfb33199\";\nconst REDIRECT_URI = \"http://arrogant-step.surge.sh\";\n\nlet accessToken;\n\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    // Check if Token Has Been Obtained\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      // Grab New Access Token When Expires\n      window.setTimeout(() => (accessToken = \"\"), expiresIn * 1000);\n      window.history.pushState(\"Access Token\", null, \"/\");\n      return accessToken;\n    } else {\n      // Redirect User\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${CLIENT_ID}&response_type=token&scope=playlist-modify-public&redirect_uri=${REDIRECT_URI}`;\n      window.location = accessUrl;\n    }\n  },\n  search(term) {\n    // Request Results From Spotify\n    const accessToken = Spotify.getAccessToken();\n    return (\n      fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n        headers: {\n          Authorization: `Bearer ${accessToken}`,\n        },\n      })\n        .then((response) => {\n          return response.json();\n        })\n        // If No Results\n        .then((jsonResponse) => {\n          if (!jsonResponse.tracks) {\n            return [];\n          }\n          // If Results\n          return jsonResponse.tracks.items.map((track) => ({\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri,\n          }));\n        })\n    );\n  },\n  savePlaylist(name, trackURIs) {\n    // If No Name or Tracks\n    if (!name || !trackURIs.length) {\n      return;\n    }\n    const accessToken = Spotify.getAccessToken();\n    const headers = { Authorization: `Bearer ${accessToken}` };\n    let userId;\n    // Access User Account\n    return fetch(\"https://api.spotify.com/v1/me\", { headers: headers })\n      .then((response) => response.json())\n      .then((jsonResponse) => {\n        // Access User Playlists\n        userId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n          headers: headers,\n          method: \"POST\",\n          body: JSON.stringify({ name: name }),\n        })\n          .then((response) => response.json())\n          .then((jsonResponse) => {\n            // Save Playlist to Account\n            const playlistId = jsonResponse.id;\n            return fetch(\n              `https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\n              {\n                headers: headers,\n                method: \"POST\",\n                body: JSON.stringify({ uris: trackURIs }),\n              }\n            );\n          });\n      });\n  },\n};\n\nexport default Spotify;\n","import React from \"react\";\nimport \"./SearchBar.css\";\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: ''\n    }\n\n    this.search = this.search.bind(this);\n    this.handleTermChange = this.handleTermChange.bind(this);\n  };\n\n  search() {\n    this.props.onSearch(this.state.term)\n  };\n\n  handleTermChange(event) {\n    this.setState({\n      term: event.target.value\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"SearchBar\">\n        <input placeholder=\"Enter A Song, Album, or Artist\" onChange={this.handleTermChange} />\n        <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n      </div>\n    );\n  };\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport \"./Track.css\";\n\nclass Track extends React.Component {\n  constructor(props) {\n    super(props);\n    // Bind Methods\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n  }\n\n  /* Render Button */\n  renderAction() {\n    // if isRemoval = true\n    if (this.props.isRemoval) {\n      return (\n        <button className=\"Track-action\" onClick={this.removeTrack}>\n          -\n        </button>\n      );\n    // if isRemoval = false\n    } else {\n      return (\n        <button className=\"Track-action\" onClick={this.addTrack}>\n          +\n        </button>\n      );\n    }\n  }\n\n  /* Add Track */\n  addTrack() {\n    this.props.onAdd(this.props.track);\n  }\n\n  /* Remove Track */\n  removeTrack() {\n    this.props.onRemove(this.props.track);\n  }\n\n  render() {\n    return (\n      <div className=\"Track\">\n        <div className=\"Track-information\">\n          <h3>{this.props.track.name}</h3>\n          <p>\n            {this.props.track.artist} | {this.props.track.album}\n          </p>\n        </div>\n        {this.renderAction()}\n      </div>\n    );\n  }\n}\n\nexport default Track;\n","import React from \"react\";\nimport \"./TrackList.css\";\nimport Track from \"../Track/Track\";\n\nclass TrackList extends React.Component {\n  render() {\n    return (\n      <div className=\"TrackList\">\n        { // Map over tracks object and render individual tracks\n        this.props.tracks.map(track => {\n          return <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />;\n        })}\n      </div>\n    );\n  }\n}\n\nexport default TrackList;\n","import React from \"react\";\nimport \"./SearchResults.css\";\nimport TrackList from \"../TrackList/TrackList\";\n\nclass SearchResults extends React.Component {\n  render() {\n    return (\n      <div className=\"SearchResults\">\n        <h2>Results</h2>\n        <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\n      </div>\n    );\n  }\n}\n\nexport default SearchResults;\n","import React from \"react\";\nimport \"./Playlist.css\";\nimport TrackList from \"../TrackList/TrackList\";\n\nclass Playlist extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleNameChange = this.handleNameChange.bind(this);\n  };\n\n  /* Handle Name Change */\n  handleNameChange(event) {\n    this.props.onNameChange(event.target.value)\n  };\n\n  render() {\n    return (\n<div className=\"Playlist\">\n  <input defaultValue={'New Playlist'} onChange={this.handleNameChange} />\n    <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\n  <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n</div>\n    );\n  }\n}\n\nexport default Playlist;\n","import React from \"react\";\nimport \"./App.css\";\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from \"../SearchResults/SearchResults\";\nimport Playlist from \"../Playlist/Playlist\";\nimport Spotify from \"../../util/Spotify\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Search Results\n      searchResults: [],\n      // Playlist Name\n      playlistName: '',\n      // Playlist Tracks\n      playlistTracks: []\n    }\n    // Bind Methods\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n  \n  /* Add Track */\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    // Check if track is already in playlist\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    }\n    // Update State with Added Track\n      tracks.push(track);\n      this.setState({\n        playlistTracks: tracks\n      })\n  };\n\n  /* Remove Track */\n  removeTrack(track) {\n    // Filter Out Unwanted Track by ID\n    const updatedTracks = this.state.playlistTracks.filter(removedTrack =>\n      removedTrack.id !== track.id);\n    // Update State without Removed Track\n    this.setState(({\n      playlistTracks: updatedTracks\n    }))\n  };\n\n  /* Update Playlist Name */\n  updatePlaylistName(name) {\n    this.setState({\n      playlistName: name\n    })\n  };\n\n  /* Save Playlist */\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs)\n    .then(() => {\n      this.setState({\n        playlistName: 'New Playlist',\n        playlistTracks: []\n      })\n    })\n  };\n\n  /* Search */\n  search(term) {\n    Spotify.search(term)\n    .then(searchResults => {\n      this.setState({\n        searchResults: searchResults\n      })\n    })\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>\n          Ja<span className=\"highlight\">mmm</span>ing\n        </h1>\n        <div className=\"App\">\n          {/* Search Bar */}\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n          {/* Search Results */}\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack}/>\n          {/* Playlist */}\n            <Playlist playlistName={this.state.playlistName} playlistTracks={this.state.playlistTracks} onRemove={this.removeTrack} onNameChange={this.updatePlaylistName} onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}